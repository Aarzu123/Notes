# MongoDB Practice
?
MongoDB Exercise in mongo shell
?
## create database
?
Connect to a running mongo instance, use a database named `mongo_practice`.

>use mongo_practice
< 'switched to db mongo_practice'

## Insert Documents
?
Insert the following documents into a `movies` collection.
?
```
title : Fight Club
writer : Chuck Palahniuk
year : 1999
actors : [
  Brad Pitt
  Edward Norton
]
?
?
```
?
```
title : Pulp Fiction
writer : Quentin Tarantino
year : 1994
actors : [
  John Travolta
  Uma Thurman
]
```
?
```
title : Inglorious Basterds
writer : Quentin Tarantino
year : 2009
actors : [
  Brad Pitt
  Diane Kruger
  Eli Roth
]
```
?
```
title : The Hobbit: An Unexpected Journey
writer : J.R.R. Tolkein
year : 2012
franchise : The Hobbit
```
?
```
title : The Hobbit: The Desolation of Smaug
writer : J.R.R. Tolkein
year : 2013
franchise : The Hobbit
```
?
```
title : The Hobbit: The Battle of the Five Armies
writer : J.R.R. Tolkein
year : 2012
franchise : The Hobbit
synopsis : Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.
```
?
```
title : Pee Wee Herman's Big Adventure
```
?
```
title : Avatar
```

##Insert Queries:

db.movies.insertOne({ title : "Pulp Fiction",writer:"Quentin Tarantino",year:1994,actors:["John Travolt","Uma Thurman"]})
{
  acknowledged: true,
  insertedId: ObjectId("6442551206f67e0927a094e5")
}
db.movies.insertOne({ title : "Fight Club",writer:"Chuck Palahniuk",year:1999,actors:["Brad Pitt","Edward Norton"]})
{
  acknowledged: true,
  insertedId: ObjectId("6442557806f67e0927a094e6")
}
db.movies.insertOne({ title : "Inglorious Basterds",writer:"Quentin Tarantino",year:2009,actors:["Brad Pitt"," Diane Kruger","Eli Roth"]})
{
  acknowledged: true,
  insertedId: ObjectId("644255ce06f67e0927a094e7")
}
db.movies.insertOne({ title : "The Hobbit: An Unexpected Journey",writer:"J.R.R. Tolkein",year:2012,franchise : "The Hobbit"})
{
  acknowledged: true,
  insertedId: ObjectId("6442563e06f67e0927a094e8")
}
db.movies.insertOne({ title : "The Hobbit: The Desolation of Smaug",writer:"J.R.R. Tolkein",year:2013,franchise : "The Hobbit"})
{
  acknowledged: true,
  insertedId: ObjectId("6442565e06f67e0927a094e9")
}
db.movies.insertOne({ title : "The Hobbit: The Battle of the Five Armies",writer:"J.R.R. Tolkein",year:2012,franchise : "The Hobbit",synopsis :" Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness"})
{
  acknowledged: true,
  insertedId: ObjectId("644256c606f67e0927a094ea")
}
db.movies.insertOne({ title : " Pee Wee Herman's Big Adventure"})
{
  acknowledged: true,
  insertedId: ObjectId("6442570a06f67e0927a094eb")
}
db.movies.insertOne({ title : "Avatar"})
{
  acknowledged: true,
  insertedId: ObjectId("6442572506f67e0927a094ec")
}


## Query / Find Documents
?
query the `movies` collection to
?
1. get all documents
?>db.movies.find()

2.get all documents with `writer` set to "Quentin Tarantino"
>db.movies.findOne({"writer":"Quentin Tarantino"})

3.get all documents where `actors` include "Brad Pitt"
>db.movies.find({"actors":"Brad Pitt"})

4.get all documents with `franchise` set to "The Hobbit"
>db.movies.find({"franchise":"The Hobbit"})

5. get all movies released in the 90s
>db.movies.find({$and:[{year:{$lt:2000}},{year:{$gte:1990}}]})

6.get all movies released before the year 2000 or after 2010
>db.movies.find({$or:[{year:{$lt:2000}},{year:{$gt:2010}}]})

## Update Documents
?
1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
>db.movies.updateOne({title : "The Hobbit: An Unexpected Journey"}, { $set:{synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }})

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
>db.movies.updateOne({title : "The Hobbit: The Desolation of Smaug"}, { $set:{synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }})

 
3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
>db.movies.updateOne({title : "Pulp Fiction"}, {$set:{actor:"Samuel L. Jackson"}})

 
/////////////////  TEXT SEARCH   /////////////////////

 
1.find all movies that have a synopsis that contains the word "Bilbo"
>db.movies.find({ synopsis: /Bilbo/g }).pretty();

 

2.find all movies that have a synopsis that contains the word "Gandalf"
>db.movies.find({ synopsis: /Gandalf/g }).pretty();

 

3.find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
>db.movies.find({ $and: [{ synopsis: /Bilbo/g }, { synopsis: { $not: /Gandalf/g } }] }).pretty();

 

4.find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
>db.movies.find({ synopsis: /(dwarves|hobbit)/g }).pretty();

 

5.find all movies that have a synopsis that contains the word "gold" and "dragon"
>db.movies.find({ $and: [{ synopsis: /gold/g }, { synopsis: /dragon/g }] }).pretty();

 
## Delete Documents
?
1. delete the movie "Pee Wee Herman's Big Adventure"
>db.movies.deleteOne({title:" Pee Wee Herman's Big Adventure"})
?
2. delete the movie "Avatar"
>db.movies.deleteOne({title:"Avatar"})

?
?



?